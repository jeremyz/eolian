Evas_Object_Image =
{
     inherit
     {
          Evas_Object;
     }
     properties
     {
           /* Set the DPI resolution of an image object's source image. */
           rw load_dpi(
               double dpi /* in */
          );
           /* Apply the source object's clip to the proxy */
           rw source_clip(
               Eina_Bool source_clip /* in */
          );
           /* Set whether the image object's fill property should track the object's size. */
           rw filled(
               Eina_Bool filled /* in */
          );
           /* Set the content hint setting of a given image object of the canvas. */
           rw content_hint(
               Evas_Image_Content_Hint hint /* in */
          );
           /* Inform a given image object to load a selective region of its source image. */
           rw load_region(
               int x /* in */,
               int y /* in */,
               int w /* in */,
               int h /* in */
          );
           /* Enable or disable alpha channel usage on the given image object. */
           rw alpha(
               Eina_Bool alpha /* in */
          );
           /* Set the size of a given image object's source image, when loading it. */
           rw load_size(
               int w /* in */,
               int h /* in */
          );
           /* Set the dimensions for an image object's border, a region which won't ever be scaled together with its center. */
           rw border(
               int l /* in */,
               int r /* in */,
               int t /* in */,
               int b /* in */
          );
           /* Sets whether to use high-quality image scaling algorithm on the given image object. */
           rw smooth_scale(
               Eina_Bool smooth_scale /* in */
          );
           /* Sets the scaling factor (multiplier) for the borders of an image object. */
           rw border_scale(
               double scale /* in */
          );
           /* Mark whether the given image object is dirty (needs to be redrawn). */
           rw pixels_dirty(
               Eina_Bool dirty /* in */
          );
           /* Set the video surface linked to a given image of the canvas */
           rw video_surface(
               Evas_Video_Surface* surf /* in */
          );
           /* Set the video surface capabilities to a given image of the canvas */
           rw video_surface_caps(
               unsigned int caps /* in */
          );
           /* Define if the orientation information in the image file should be honored. */
           rw load_orientation(
               Eina_Bool enable /* in */
          );
           /* Sets the tiling mode for the given evas image object's fill. */
           rw fill_spread(
               Evas_Fill_Spread spread /* in */
          );
           /* Set the source file from where an image object must fetch the real image data (it may be an Eet file, besides pure image ones). */
           rw file(
               char* file /* The image file path */,
               char* key /* The image key in @p file (if its an Eet one), or @c */
          );
           /* Sets borders) should be drawn when Evas is rendering it. */
           rw border_center_fill(
               Evas_Border_Fill_Mode fill /* in */
          );
           /* Sets the size of the given image object. */
           rw size(
               int w /* in */,
               int h /* in */
          );
           /* Set the source object to be shown or hidden. */
           rw source_visible(
               Eina_Bool visible /* in */
          );
           /* Set how to fill an image object's drawing rectangle given the (real) image bound to it. */
           rw fill(
               Evas_Coord x /* in */,
               Evas_Coord y /* in */,
               Evas_Coord w /* in */,
               Evas_Coord h /* in */
          );
           /* Set the native surface of a given image of the canvas */
           rw native_surface(
               Evas_Native_Surface* surf /* in */
          );
           /* Set the scale down factor of a given image object's source image, when loading it. */
           rw load_scale_down(
               int scale_down /* in */
          );
           /* Set the scale hint of a given image of the canvas. */
           rw scale_hint(
               Evas_Image_Scale_Hint hint /* in */
          );
           /* Set events to be repeated to the source object. */
           rw source_events(
               Eina_Bool source /* in */
          );
           /* Set the colorspace of a given image of the canvas. */
           rw colorspace(
               Evas_Colorspace cspace /* in */
          );
           /* Set the callback function to get pixels from a canvas' image. */
           wo pixels_get_callback_set(
               Evas_Object_Image_Pixels_Get_Cb func /* in */,
               void* data /* in */
          );
           /* Set the source mmaped file from where an image object must fetch the real image data (it may be any Eina_File). */
           wo mmap_set(
               Eina_File* f /* in */,
               char* key /* in */
          );
           /* Replaces the raw image data of the given image object. */
           wo data_copy_set(
               void* data /* in */
          );
           /* Set the frame to current frame of an image object */
           wo animated_frame_set(
               int frame_index /* in */
          );
           /* Get the support state of a given image */
           ro region_support_get(
               Eina_Bool* region /* out */
          );
           /* Retrieves a number representing any error that occurred during the last loading of the given image object's source image. */
           ro load_error_get(
               Evas_Load_Error* load_error /*  */
          );
           /* Get the total number of frames of the image object. */
           ro animated_frame_count_get(
               int* frame_count /* out */
          );
           /* Retrieves the row stride of the given image object. */
           ro stride_get(
               int* stride /* out */
          );
           /* Check if an image object can be animated (have multiple frames) */
           ro animated_get(
               Eina_Bool* animated /* out */
          );
           /* Get the kind of looping the image object does. */
           ro animated_loop_type_get(
               Evas_Image_Animated_Loop_Hint* hint /* out */
          );
           /* Get the number times the animation of the object loops. */
           ro animated_loop_count_get(
               int* loop_count /* out */
          );
     }
     methods
     {
           /* Set the source object on an image object to used as a */
          source_set(
               in Evas_Object* src /* in */,
               out Eina_Bool* result /* out */
          );
           /* Get the current source object of an image object. */
          source_get(
               out Evas_Object** src /* out */
          );
           /* Begin preloading an image object's image data in the background */
          preload_begin(
          );
           /* Mark a sub-region of the given image object to be redrawn. */
          data_update_add(
               in int x /* in */,
               in int y /* in */,
               in int w /* in */,
               in int h /* in */
          );
           /* Get the duration of a sequence of frames. */
          animated_frame_duration_get(
               in int start_frame /* in */,
               in int frame_num /* in */,
               out double* frame_duration /* out */
          );
           /* Save the given image object's contents to an (image) file. */
          save(
               in char* file /* in */,
               in char* key /* in */,
               in char* flags /* in */,
               out Eina_Bool* result /* out */
          );
           /* Sets the raw image data of the given image object. */
          data_set(
               in void* data /* in */
          );
           /* Get a pointer to the raw image data of the given image object. */
          data_get(
               in Eina_Bool for_writing /* in */,
               out void** data /* out */
          );
           /* Cancel preloading an image object's image data in the background */
          preload_cancel(
          );
           /* Converts the raw image data of the given image object to the specified colorspace. */
          data_convert(
               in Evas_Colorspace to_cspace /* in */,
               out void** data /* out */
          );
           /* Import pixels from given source to a given canvas image object. */
          pixels_import(
               in Evas_Pixel_Import_Source* pixels /* in */,
               out Eina_Bool* result /* out */
          );
           /* Reload an image object's image data. */
          reload(
          );
     }

}