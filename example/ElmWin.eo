Elm_Win =
{
     inherit
     {
          Elm_Widget;
     }
     properties
     {
           /* Sets whether the window is a keyboard. */
           rw keyboard_win(
               Eina_Bool is_keyboard /*  */
          );
           /* Set the window's autodel state. */
           rw autodel(
               Eina_Bool autodel /*  */
          );
           /* Set the override state of a window. */
           rw override(
               Eina_Bool override /*  */
          );
           /* Set the iconified state of a window. */
           rw iconified(
               Eina_Bool iconified /*  */
          );
           /* Set which zone this quickpanel should appear in */
           rw quickpanel_zone(
               int zone /*  */
          );
           /* Set the maximized state of a window. */
           rw maximized(
               Eina_Bool maximized /*  */
          );
           /* Set the modal state of a window. */
           rw modal(
               Eina_Bool modal /*  */
          );
           /* Set the icon name of the window */
           rw icon_name(
               char* icon_name /*  */
          );
           /* Set the withdrawn state of a window. */
           rw withdrawn(
               Eina_Bool withdrawn /*  */
          );
           /* Set the role of the window */
           rw role(
               char* role /*  */
          );
           /* Set the window stepping used with sizing calculation */
           rw size_step(
               int w /*  */,
               int h /*  */
          );
           /* Set the style for the focus highlight on this window */
           rw focus_highlight_style(
               char* style /*  */
          );
           /* Set the borderless state of a window. */
           rw borderless(
               Eina_Bool borderless /*  */
          );
           /* Constrain the maximum width and height of a window to the width and height of its screen */
           rw screen_constrain(
               Eina_Bool constrain /*  */
          );
           /* Set the array of available profiles to a window. */
           rw available_profiles(
               char** profiles /*  */,
               unsigned int count /*  */
          );
           /* Set the enabled status for the focus highlight in a window */
           rw focus_highlight_enabled(
               Eina_Bool enabled /*  */
          );
           /* Set the title of the window */
           rw title(
               char* title /*  */
          );
           /* Set the alpha channel state of a window. */
           rw alpha(
               Eina_Bool alpha /*  */
          );
           /* Set the urgent state of a window. */
           rw urgent(
               Eina_Bool urgent /*  */
          );
           /* Set the rotation of the window. */
           rw rotation(
               int rotation /*  */
          );
           /* Set a window object's icon */
           rw icon_object(
               Evas_Object* icon /*  */
          );
           /* Set the minor priority of a quickpanel window */
           rw quickpanel_priority_minor(
               int priority /*  */
          );
           /* Set the sticky state of the window. */
           rw sticky(
               Eina_Bool sticky /*  */
          );
           /* Sets the keyboard mode of the window. */
           rw keyboard_mode(
               Elm_Win_Keyboard_Mode mode /*  */
          );
           /* Set the animate status for the focus highlight for this window. */
           rw focus_highlight_animate(
               Eina_Bool animate /*  */
          );
           /* Set the aspect ratio of a window. */
           rw aspect(
               double aspect /*  */
          );
           /* Set the major priority of a quickpanel window */
           rw quickpanel_priority_major(
               int priority /*  */
          );
           /* Sets the indicator opacity mode of the window. */
           rw indicator_opacity(
               Elm_Win_Indicator_Opacity_Mode mode /*  */
          );
           /* Set the demand_attention state of a window. */
           rw demand_attention(
               Eina_Bool demand_attention /*  */
          );
           /* Set the layer of the window. */
           rw layer(
               int layer /*  */
          );
           /* Set the profile of a window. */
           rw profile(
               char* profile /*  */
          );
           /* Set the shaped state of a window. */
           rw shaped(
               Eina_Bool shaped /*  */
          );
           /* Set the fullscreen state of a window. */
           rw fullscreen(
               Eina_Bool fullscreen /*  */
          );
           /* Sets the indicator mode of the window. */
           rw indicator_mode(
               Elm_Win_Indicator_Mode mode /*  */
          );
           /* Set if this window is an illume conformant window */
           rw conformant(
               Eina_Bool conformant /*  */
          );
           /* Set the base window size used with stepping calculation */
           rw size_base(
               int w /*  */,
               int h /*  */
          );
           /* Set a window to be an illume quickpanel window */
           rw quickpanel(
               Eina_Bool quickpanel /*  */
          );
           /* Rotates the window and resizes it. */
           wo rotation_with_resize_set(
               int rotation /*  */
          );
           /* Set the window to be skipped by keyboard focus */
           wo prop_focus_skip_set(
               Eina_Bool skip /*  */
          );
           /* Get the screen position of a window. */
           ro screen_position_get(
               int* x /*  */,
               int* y /*  */
          );
           /* Get the Ecore_X_Window of an Evas_Object */
           ro xwindow_get(
               Ecore_X_Window* ret /*  */
          );
           /* Determine whether a window has focus */
           ro focus_get(
               Eina_Bool* ret /*  */
          );
           /* Get screen geometry details for the screen that a window is on */
           ro screen_size_get(
               int* x /*  */,
               int* y /*  */,
               int* w /*  */,
               int* h /*  */
          );
           /* Get the Main Menu of a window. */
           ro main_menu_get(
               Eo** ret /* Main menu */
          );
           /* Get the Ecore_Wl_Window of an Evas_Object */
           ro wl_window_get(
               Ecore_Wl_Window** ret /*  */
          );
           /* Get the Ecore_Window of an Evas_Object */
           ro window_id_get(
               Ecore_Window* ret /*  */
          );
           /* Get screen dpi for the screen that a window is on */
           ro screen_dpi_get(
               int* xdpi /*  */,
               int* ydpi /*  */
          );
           /* Get the inlined image object handle */
           ro inlined_image_object_get(
               Evas_Object** ret /*  */
          );
     }
     methods
     {
           /* Create a socket to provide the service for Plug widget */
          socket_listen(
               in char* svcname /*  */,
               in int svcnum /*  */,
               in Eina_Bool svcsys /*  */,
               out Eina_Bool* ret /*  */
          );
           /* Send a command to the windowing environment */
          illume_command_send(
               in Elm_Illume_Command command /*  */,
               in void* params /*  */
          );
           /* Activate a window object. */
          activate(
          );
           /* Add subobj as a resize object of window */
          resize_object_add(
               in Evas_Object* subobj /*  */
          );
           /* No description supplied by the EAPI. */
          win_constructor(
               in char* name /*  */,
               in Elm_Win_Type type /*  */
          );
           /* Raise a window object. */
          raise(
          );
           /* Lower a window object. */
          lower(
          );
           /* Delete subobj as a resize object of window */
          resize_object_del(
               in Evas_Object* subobj /*  */
          );
           /* Center a window on its screen */
          center(
               in Eina_Bool h /*  */,
               in Eina_Bool v /*  */
          );
     }

}