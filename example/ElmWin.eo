{
  "name": "Elm_Win", 
  "legacy": "elm_win", 
  "inherits": [
    "Elm_Widget"
  ], 
  "constructors": {
    "win_constructor": {
      "comment": "No description supplied by the EAPI.", 
      "parameters": {
        "in": [
          {
            "name": [
              "const char*", 
              ""
            ]
          }, 
          {
            "type": [
              "Elm_Win_Type", 
              ""
            ]
          }
        ]
      }
    }
  }, 
  "properties": {
    "keyboard_win": {
      "set": {
        "comment": "Sets whether the window is a keyboard."
      }, 
      "get": {
        "comment": "Get whether the window is a keyboard."
      }, 
      "parameters": [
        {
          "is_keyboard": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "autodel": {
      "set": {
        "comment": "Set the window's autodel state."
      }, 
      "get": {
        "comment": "Get the window's autodel state."
      }, 
      "parameters": [
        {
          "autodel": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "override": {
      "set": {
        "comment": "Set the override state of a window."
      }, 
      "get": {
        "comment": "Get the override state of a window."
      }, 
      "parameters": [
        {
          "override": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "iconified": {
      "set": {
        "comment": "Set the iconified state of a window."
      }, 
      "get": {
        "comment": "Get the iconified state of a window."
      }, 
      "parameters": [
        {
          "iconified": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "quickpanel_zone": {
      "set": {
        "comment": "Set which zone this quickpanel should appear in"
      }, 
      "get": {
        "comment": "Get which zone this quickpanel should appear in"
      }, 
      "parameters": [
        {
          "zone": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "maximized": {
      "set": {
        "comment": "Set the maximized state of a window."
      }, 
      "get": {
        "comment": "Get the maximized state of a window."
      }, 
      "parameters": [
        {
          "maximized": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "modal": {
      "set": {
        "comment": "Set the modal state of a window."
      }, 
      "get": {
        "comment": "Get the modal state of a window."
      }, 
      "parameters": [
        {
          "modal": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "icon_name": {
      "set": {
        "comment": "Set the icon name of the window"
      }, 
      "get": {
        "comment": "Get the icon name of the window"
      }, 
      "parameters": [
        {
          "icon_name": [
            "const char*", 
            ""
          ]
        }
      ]
    }, 
    "withdrawn": {
      "set": {
        "comment": "Set the withdrawn state of a window."
      }, 
      "get": {
        "comment": "Get the withdrawn state of a window."
      }, 
      "parameters": [
        {
          "withdrawn": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "role": {
      "set": {
        "comment": "Set the role of the window"
      }, 
      "get": {
        "comment": "Get the role of the window"
      }, 
      "parameters": [
        {
          "role": [
            "const char*", 
            ""
          ]
        }
      ]
    }, 
    "size_step": {
      "set": {
        "comment": "Set the window stepping used with sizing calculation"
      }, 
      "get": {
        "comment": "Get the stepping of a window."
      }, 
      "parameters": [
        {
          "w": [
            "int", 
            ""
          ]
        }, 
        {
          "h": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "focus_highlight_style": {
      "set": {
        "comment": "Set the style for the focus highlight on this window"
      }, 
      "get": {
        "comment": "Get the style set for the focus highlight object"
      }, 
      "parameters": [
        {
          "style": [
            "const char*", 
            ""
          ]
        }
      ]
    }, 
    "borderless": {
      "set": {
        "comment": "Set the borderless state of a window."
      }, 
      "get": {
        "comment": "Get the borderless state of a window."
      }, 
      "parameters": [
        {
          "borderless": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "screen_constrain": {
      "set": {
        "comment": "Constrain the maximum width and height of a window to the width and height of its screen"
      }, 
      "get": {
        "comment": "Retrieve the constraints on the maximum width and height of a window relative to the width and height of its screen"
      }, 
      "parameters": [
        {
          "constrain": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "available_profiles": {
      "set": {
        "comment": "Set the array of available profiles to a window."
      }, 
      "get": {
        "comment": "Get the array of available profiles of a window."
      }, 
      "parameters": [
        {
          "profiles": [
            "const char**", 
            ""
          ]
        }, 
        {
          "count": [
            "unsigned int", 
            ""
          ]
        }
      ]
    }, 
    "focus_highlight_enabled": {
      "set": {
        "comment": "Set the enabled status for the focus highlight in a window"
      }, 
      "get": {
        "comment": "Get the enabled value of the focus highlight for this window"
      }, 
      "parameters": [
        {
          "enabled": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "title": {
      "set": {
        "comment": "Set the title of the window"
      }, 
      "get": {
        "comment": "Get the title of the window"
      }, 
      "parameters": [
        {
          "title": [
            "const char*", 
            ""
          ]
        }
      ]
    }, 
    "alpha": {
      "set": {
        "comment": "Set the alpha channel state of a window."
      }, 
      "get": {
        "comment": "Get the alpha channel state of a window."
      }, 
      "parameters": [
        {
          "alpha": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "urgent": {
      "set": {
        "comment": "Set the urgent state of a window."
      }, 
      "get": {
        "comment": "Get the urgent state of a window."
      }, 
      "parameters": [
        {
          "urgent": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "rotation": {
      "set": {
        "comment": "Set the rotation of the window."
      }, 
      "get": {
        "comment": "Get the rotation of the window."
      }, 
      "parameters": [
        {
          "rotation": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "icon_object": {
      "set": {
        "comment": "Set a window object's icon"
      }, 
      "get": {
        "comment": "Get the icon object used for the window"
      }, 
      "parameters": [
        {
          "icon": [
            "Evas_Object*", 
            ""
          ]
        }
      ]
    }, 
    "quickpanel_priority_minor": {
      "set": {
        "comment": "Set the minor priority of a quickpanel window"
      }, 
      "get": {
        "comment": "Get the minor priority of a quickpanel window"
      }, 
      "parameters": [
        {
          "priority": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "sticky": {
      "set": {
        "comment": "Set the sticky state of the window."
      }, 
      "get": {
        "comment": "Get the sticky state of the window."
      }, 
      "parameters": [
        {
          "sticky": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "keyboard_mode": {
      "set": {
        "comment": "Sets the keyboard mode of the window."
      }, 
      "get": {
        "comment": "Get the keyboard mode of the window."
      }, 
      "parameters": [
        {
          "mode": [
            "Elm_Win_Keyboard_Mode", 
            ""
          ]
        }
      ]
    }, 
    "focus_highlight_animate": {
      "set": {
        "comment": "Set the animate status for the focus highlight for this window."
      }, 
      "get": {
        "comment": "Get the animate status for the focus highlight for this window."
      }, 
      "parameters": [
        {
          "animate": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "aspect": {
      "set": {
        "comment": "Set the aspect ratio of a window."
      }, 
      "get": {
        "comment": "Get the aspect ratio of a window."
      }, 
      "parameters": [
        {
          "aspect": [
            "double", 
            ""
          ]
        }
      ]
    }, 
    "quickpanel_priority_major": {
      "set": {
        "comment": "Set the major priority of a quickpanel window"
      }, 
      "get": {
        "comment": "Get the major priority of a quickpanel window"
      }, 
      "parameters": [
        {
          "priority": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "indicator_opacity": {
      "set": {
        "comment": "Sets the indicator opacity mode of the window."
      }, 
      "get": {
        "comment": "Get the indicator opacity mode of the window."
      }, 
      "parameters": [
        {
          "mode": [
            "Elm_Win_Indicator_Opacity_Mode", 
            ""
          ]
        }
      ]
    }, 
    "demand_attention": {
      "set": {
        "comment": "Set the demand_attention state of a window."
      }, 
      "get": {
        "comment": "Get the demand_attention state of a window."
      }, 
      "parameters": [
        {
          "demand_attention": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "layer": {
      "set": {
        "comment": "Set the layer of the window."
      }, 
      "get": {
        "comment": "Get the layer of the window."
      }, 
      "parameters": [
        {
          "layer": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "profile": {
      "set": {
        "comment": "Set the profile of a window."
      }, 
      "get": {
        "comment": "Get the profile of a window."
      }, 
      "parameters": [
        {
          "profile": [
            "const char*", 
            ""
          ]
        }
      ]
    }, 
    "shaped": {
      "set": {
        "comment": "Set the shaped state of a window."
      }, 
      "get": {
        "comment": "Get the shaped state of a window."
      }, 
      "parameters": [
        {
          "shaped": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "fullscreen": {
      "set": {
        "comment": "Set the fullscreen state of a window."
      }, 
      "get": {
        "comment": "Get the fullscreen state of a window."
      }, 
      "parameters": [
        {
          "fullscreen": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "indicator_mode": {
      "set": {
        "comment": "Sets the indicator mode of the window."
      }, 
      "get": {
        "comment": "Get the indicator mode of the window."
      }, 
      "parameters": [
        {
          "mode": [
            "Elm_Win_Indicator_Mode", 
            ""
          ]
        }
      ]
    }, 
    "conformant": {
      "set": {
        "comment": "Set if this window is an illume conformant window"
      }, 
      "get": {
        "comment": "Get if this window is an illume conformant window"
      }, 
      "parameters": [
        {
          "conformant": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "size_base": {
      "set": {
        "comment": "Set the base window size used with stepping calculation"
      }, 
      "get": {
        "comment": "Get the base size of a window."
      }, 
      "parameters": [
        {
          "w": [
            "int", 
            ""
          ]
        }, 
        {
          "h": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "quickpanel": {
      "set": {
        "comment": "Set a window to be an illume quickpanel window"
      }, 
      "get": {
        "comment": "Get if this window is a quickpanel or not"
      }, 
      "parameters": [
        {
          "quickpanel": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "rotation_with_resize": {
      "set": {
        "comment": "Rotates the window and resizes it."
      }, 
      "parameters": [
        {
          "rotation": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "prop_focus_skip": {
      "set": {
        "comment": "Set the window to be skipped by keyboard focus"
      }, 
      "parameters": [
        {
          "skip": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "screen_position": {
      "get": {
        "comment": "Get the screen position of a window."
      }, 
      "parameters": [
        {
          "x": [
            "int", 
            ""
          ]
        }, 
        {
          "y": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "xwindow": {
      "get": {
        "comment": "Get the Ecore_X_Window of an Evas_Object"
      }, 
      "parameters": [
        {
          "ret": [
            "Ecore_X_Window", 
            ""
          ]
        }
      ]
    }, 
    "focus": {
      "get": {
        "comment": "Determine whether a window has focus"
      }, 
      "parameters": [
        {
          "ret": [
            "Eina_Bool", 
            ""
          ]
        }
      ]
    }, 
    "screen_size": {
      "get": {
        "comment": "Get screen geometry details for the screen that a window is on"
      }, 
      "parameters": [
        {
          "x": [
            "int", 
            ""
          ]
        }, 
        {
          "y": [
            "int", 
            ""
          ]
        }, 
        {
          "w": [
            "int", 
            ""
          ]
        }, 
        {
          "h": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "main_menu": {
      "get": {
        "comment": "Get the Main Menu of a window."
      }, 
      "parameters": [
        {
          "ret": [
            "Eo*", 
            "Main menu"
          ]
        }
      ]
    }, 
    "wl_window": {
      "get": {
        "comment": "Get the Ecore_Wl_Window of an Evas_Object"
      }, 
      "parameters": [
        {
          "ret": [
            "Ecore_Wl_Window*", 
            ""
          ]
        }
      ]
    }, 
    "window_id": {
      "get": {
        "comment": "Get the Ecore_Window of an Evas_Object"
      }, 
      "parameters": [
        {
          "ret": [
            "Ecore_Window", 
            ""
          ]
        }
      ]
    }, 
    "screen_dpi": {
      "get": {
        "comment": "Get screen dpi for the screen that a window is on"
      }, 
      "parameters": [
        {
          "xdpi": [
            "int", 
            ""
          ]
        }, 
        {
          "ydpi": [
            "int", 
            ""
          ]
        }
      ]
    }, 
    "inlined_image_object": {
      "get": {
        "comment": "Get the inlined image object handle"
      }, 
      "parameters": [
        {
          "ret": [
            "Evas_Object*", 
            ""
          ]
        }
      ]
    }
  }, 
  "methods": {
    "socket_listen": {
      "comment": "Create a socket to provide the service for Plug widget", 
      "return_type": "Eina_Bool", 
      "parameters": {
        "in": [
          {
            "svcname": [
              "const char*", 
              ""
            ]
          }, 
          {
            "svcnum": [
              "int", 
              ""
            ]
          }, 
          {
            "svcsys": [
              "Eina_Bool", 
              ""
            ]
          }
        ]
      }
    }, 
    "illume_command_send": {
      "comment": "Send a command to the windowing environment", 
      "parameters": {
        "in": [
          {
            "command": [
              "Elm_Illume_Command", 
              ""
            ]
          }, 
          {
            "params": [
              "void*", 
              ""
            ]
          }
        ]
      }
    }, 
    "activate": {
      "comment": "Activate a window object.", 
      "parameters": {}
    }, 
    "resize_object_add": {
      "comment": "Add subobj as a resize object of window", 
      "parameters": {
        "in": [
          {
            "subobj": [
              "Evas_Object*", 
              ""
            ]
          }
        ]
      }
    }, 
    "raise": {
      "comment": "Raise a window object.", 
      "parameters": {}
    }, 
    "lower": {
      "comment": "Lower a window object.", 
      "parameters": {}
    }, 
    "resize_object_del": {
      "comment": "Delete subobj as a resize object of window", 
      "parameters": {
        "in": [
          {
            "subobj": [
              "Evas_Object*", 
              ""
            ]
          }
        ]
      }
    }, 
    "center": {
      "comment": "Center a window on its screen", 
      "parameters": {
        "in": [
          {
            "h": [
              "Eina_Bool", 
              ""
            ]
          }, 
          {
            "v": [
              "Eina_Bool", 
              ""
            ]
          }
        ]
      }
    }
  }, 
  "implements": [
    [
      "Elm_Widget", 
      "focus_direction"
    ], 
    [
      "Evas_Smart", 
      "hide"
    ], 
    [
      "Elm_Widget", 
      "focus_next_manager_is"
    ], 
    [
      "Evas_Smart", 
      "show"
    ], 
    [
      "Evas_Smart", 
      "move"
    ], 
    [
      "Elm_Widget", 
      "theme"
    ], 
    [
      "Elm_Widget", 
      "focus_direction_manager_is"
    ], 
    [
      "Elm_Widget", 
      "focus_next"
    ], 
    [
      "Evas_Smart", 
      "add"
    ], 
    [
      "Evas_Smart", 
      "del"
    ], 
    [
      "Eo_Base", 
      "constructor"
    ], 
    [
      "Elm_Widget", 
      "on_focus"
    ], 
    [
      "Elm_Widget", 
      "event"
    ], 
    [
      "Evas_Smart", 
      "resize"
    ]
  ], 
  "signals": [
    [
      "delete,request", 
      ""
    ], 
    [
      "focus,out", 
      ""
    ], 
    [
      "focus,in", 
      ""
    ], 
    [
      "moved", 
      ""
    ], 
    [
      "withdrawn", 
      ""
    ], 
    [
      "iconified", 
      ""
    ], 
    [
      "normal", 
      ""
    ], 
    [
      "stick", 
      ""
    ], 
    [
      "unstick", 
      ""
    ], 
    [
      "fullscreen", 
      ""
    ], 
    [
      "unfullscreen", 
      ""
    ], 
    [
      "maximized", 
      ""
    ], 
    [
      "unmaximized", 
      ""
    ], 
    [
      "ioerr", 
      ""
    ], 
    [
      "indicator,prop,changed", 
      ""
    ], 
    [
      "rotation,changed", 
      ""
    ], 
    [
      "profile,changed", 
      ""
    ], 
    [
      "focused", 
      ""
    ], 
    [
      "unfocused", 
      ""
    ]
  ]
}